# -*- mode: python; -*-
# windows reference: http://www.boost.org/doc/libs/1_62_0/more/getting_started/windows.html
import os
import sys
import subprocess
import shutil

cpu_count = 1
try:
    import multiprocessing
    cpu_count = multiprocessing.cpu_count()
except ImportError:
    pass
    
vpath = '#/third_party/boost_1_62_0'
engine = vpath + '/tools/build/v2/engine'
version = '1.62.0'
print "Building windows boost..."
currentdir =  Dir('.').path

env = DefaultEnvironment()

stagedir = Dir('#').abspath;
stagedir += '/build/third_party/boost_1_62_0'

if env['TARGET_ARCH']=='x64':
   adrmodelbits = '64'
   adrmodeldir = '/address-model-64/'
else:
   adrmodelbits = '32'
   adrmodeldir = '/'

boostlibdirprefix = '/build/msvc-14.0/debug' + adrmodeldir + 'link-static/threading-multi/'


boostcmd = 'b2 -j4 toolset=msvc-14.0 --build-type=complete   architecture=x86 address-model=' + adrmodelbits +' stage --stagedir='+ stagedir
print boostcmd
exit
buildlibdir = Dir('#build/lib').abspath + '/'

def Symlink(target, source):
    parent = os.path.dirname(target[0].abspath)
    if not os.path.exists(parent):
        os.makedirs(parent)

    if not os.path.exists(target[0].abspath):
        os.symlink(source[0].abspath, target[0].abspath)

libpath = Dir(vpath).abspath
if not os.path.exists(libpath):
    print '%s not present' % libpath
    sys.exit(1)

def copyboostlib(tofile, fromfile):
    if not os.path.exists(tofile):
       fromfile = Dir(vpath).abspath + '/bin.v2/libs/' + fromfile + boostlibdirprefix + 'libboost_' + fromfile + '-vc140-mt-gd-1_62.lib'
       print 'copying ' + fromfile + ' to ' + tofile
       shutil.copyfile(fromfile, tofile)


def build_boost_for_windows(target,source,env):
   cwd = os.getcwd()
   os.chdir(Dir(vpath).abspath)
   assert os.path.isdir(Dir(vpath).abspath)
   print Dir(vpath).abspath
   print os.getcwd()
   subprocess.call("bootstrap.bat", shell=True)
   subprocess.call(boostcmd, shell=True)
   os.chdir(cwd)
   copyboostlib(buildlibdir+'boost_program_options.lib','program_options')
   copyboostlib(buildlibdir+'boost_regex.lib','regex')
   copyboostlib(buildlibdir+'boost_system.lib','system')
   copyboostlib(buildlibdir+'libboost_system-vc140-mt-gd-1_62.lib','system')
   copyboostlib(buildlibdir+'libboost_date_time-vc140-mt-gd-1_62.lib','date_time' )
   copyboostlib(buildlibdir+'libboost_regex-vc140-mt-gd-1_62.lib','regex')
   copyboostlib(buildlibdir+'libboost_program_options-vc140-mt-gd-1_62.lib','program_options')
   copyboostlib(buildlibdir+'libboost_thread-vc140-mt-gd-1_62.lib','thread')
   copyboostlib(buildlibdir+'libboost_filesystem-vc140-mt-gd-1_62.lib','filesystem')
   copyboostlib(buildlibdir+'boost_filesystem.lib','filesystem')
   copyboostlib(buildlibdir+'libboost_chrono-vc140-mt-gd-1_62.lib','chrono')



srcdir = Dir(vpath +'/boost').abspath
destdir = Dir('#/build/include/boost').abspath

if not os.path.exists(destdir):
  print 'copying files to' + destdir
  shutil.copytree(srcdir, destdir)

env.Command('#build/lib/boost_filesystem.lib', str(Dir(vpath)), build_boost_for_windows)
env.Alias('boostbuild', '#build/lib/boost_filesystem.lib')


#Default(SymCopy([Dir('#/build/include/boost')], [Dir(vpath + bin.v2\libs\filesystem\build\msvc-14.0\debug\link-static\runtime-link-static\threading-multi)]))

print 'finished building boost for windows!! '
